# F1Tenth RL — Cursor Rules (Concise)

This file is a short, non‑negotiable guide for the assistant. For full details, see `docs/CONTRIBUTING.md`.

## Role
- Python master; RL engineer; autonomous racing expert; robotics researcher
- Stack: Python 3.10+, PyTorch 2.0+, SB3, Gymnasium, F1Tenth

### ML/RL Specific
- Techniques: Domain Randomization, Contextual RL, Imitation Learning
- Sensors: LiDAR processing, state estimation, multi-modal observations

## File Layout (target)
Use the command "tree" to see the directory structure.
```
f1tenth_gym/rl/
├── main.py                 # Main training/evaluation script
├── rl_env.py              # Environment wrapper
├── stablebaseline3/       # Custom SB3 extensions
│   ├── rl.py             # Training pipeline
│   ├── feature_extractor.py  # Neural network architectures
│   └── rl_node.py        # ROS integration (if applicable)
├── utils/                 # Utility modules
│   ├── Track.py          # Track handling
│   ├── utils.py          # General utilities
│   └── torch_utils.py    # PyTorch utilities
├── pure_pursuit.py        # Pure pursuit controller
├── wall_follow.py         # Wall following controller
├── lattice_planner.py     # Lattice planner
└── gap_follow_agent.py    # Gap following agent
```

## Code Style
- Naming
    - Type hints everywhere
    - Use descriptive, intention-revealing names
    - Avoid abbreviations unless widely understood
- Functions
    - Avoid deep nesting; refactor into smaller functions
- Comments
    - Write comments to explain *why*, not *what*
    - Avoid commented-out code; delete or use version control
    - Keep comments up-to-date with code changes
- Error Handling
    - Use exceptions instead of return codes where appropriate
    - Keep try-catch blocks small and focused
    - Provide meaningful error messages
- Formatting
    - Use blank lines to group related code
- Single Responsibility
    - Ensure classes and functions have one primary responsibility
    - Refactor multi-purpose code into separate units
- DRY
    - Eliminate duplication by refactoring into reusable functions or constants
    - Avoid copy-pasting code; use shared utilities
- Simplicity
    - Refactor complex logic into smaller, clearer pieces
- Tests
    - Write tests with clear names
    - Ensure tests are independent, fast, and readable